---
## targter target analysis default template
# title and author will be added rihght below byytar_report function,
## including eventual parameters passsed
## for custom_fields` list.
##{{targeter-yaml}}## 
execute:
  echo: false
params:
    model: "tar_mod.rds" # will have to be passed - will be a mandatory parameter  -> path 
    decision_tree_format: "static"
    # metadata_var_field: "variable"
    metadata_var_label: "label"
    profiles: TRUE
    show_toc: TRUE
    show_tables: TRUE
    fullplot_which_plot: "1:2"
    fullplot_numvar_as: "bin" # 'bin', 'value'
format:
  html:
    theme: cosmo
    toc: true
    toc-location: left
    fontsize: 1.1em
    linestretch: 1.5
    title-block-banner: true
    smooth-scroll: true
    anchor-sections: true
    search: true
    embed-resources: true
  pptx:
    slide-level: 3
  docx:
    toc: true
  pdf:
    toc: true
report_type: targeter-tree
---

```{r}
#| label: setup
#| warning: false
suppressMessages(suppressPackageStartupMessages(library(targeter)))
format <- knitr::pandoc_to()
```


```{r}
#| label: import
mod <- readRDS( file = 'tar_mod.rds')
metadata <- attr(mod, "metadata")
object <- attr(mod,"tar_object") # already filtered on tree variables
# metadata <- metadata[!duplicated(metadata[[params$metadata_var_field]])] 

```

### Tree basic information

```{r}
varimp <- attr(mod, "model_varimp")
```

Tree contains `r  nrow(varimp[which(in_tree=="*"),])` variables, with following importance (eventually showing some next variables,see the variable with `intree`=*):




```{r}
#| label: var importance
kableExtra::kable(varimp)
```


### Tree visual


```{r}
#| label: tree plot
plot(mod, format = params$decision_tree_format)
```

### Performances


```{r}
#| label: model performance AUC curve
pROC <- attr(mod, "pROC")
cat("\n\nAUC:", round(pROC$auc, 3),"\n")
plot(pROC, print.auc=TRUE)
```


### Probabilty distribution


```{r}
#| label: model proba histogram
hist(attr(mod, "model_predictions")$N_TARGET_PROB)
```

### Probabilities quantiles



```{r}
#| label: model prediction quantiles
kableExtra::kable(t(t(quantile(attr(mod, "model_predictions")$N_TARGET_PROB, probs= seq(0,1, by = 0.1)))))

```






```{r}
#| output: asis
#| label: tree variables profile 

if (params$profiles){

  cat("\n\n## Tree variables profiles\n\n")


  ## sort by descending IV
  vars <- sort(sapply(object$profiles, function(x) x$IV), decreasing = TRUE)

  for (ivar in names(vars)) {
    cat("\n\n\\newpage\n\n") # for LaTeX

    # ivar <- names(object$profiles)[i]
    iprofile <- object$profiles[[ivar]]
    ivar_label <- label(ivar,
      metadata = metadata,
      var_field = "variable", label_field = params$metadata_var_label,
      include_varname = FALSE
    )



    title_text <- tolower(ivar)
    title_iv <- paste0(" IV ", round(iprofile$IV, 3))

    if (tolower(ivar_label) != tolower(ivar)) {
      title_text <- paste(
        ivar_label, 
        ifelse(format == "html", "<br/>", " \\ ["), 
        title_iv, ifelse(format == "html", "<br/>", "]"),
        title_text)
    } else {
      title_text <- paste(
        title_text,
        ifelse(format == "html", "<br/>", " \\ ["),
        title_iv,
        ifelse(format == "html", "", " ]")
      )
    }


    # https://quarto.org/docs/authoring/markdown-basics.html#headings
    cat(paste0("\n\n::: {#", tolower(ivar), " }\n\n")) # anchor section
    cat(paste0("\n\n### ", title_text, "\n\n"))
    cat("\n:::\n\n")



    print(
      fullplot(
        iprofile,
        numvar_as = params$fullplot_numvar_as,
        which_plot = eval(
          parse(
            text = params$fullplot_which_plot
          )
        )
      )
    )

    if (as.logical(params$show_tables)) {
      cat("\n\n\\newpage\n\n") # for LaTeX
      cat("\n\n### ", tolower(ivar), " [table]\n\n")
      tab <- table_crossvar(iprofile)

      print(kableExtra::kable(tab, format = "simple"))

      cat("\n\n")
    }
  }

}
```



