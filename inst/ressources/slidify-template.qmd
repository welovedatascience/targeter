---
execute:
  echo: false
params:
  object: "" # will have to be passed - will be a mandatory parameter  -> path to a qs export of a targeter object
  fullplot_which_plot: "1:2"
  author: "welovedatascience - targeter"
  title: "targeter analyis"
  tables: "FALSE"
format:
  revealjs:
    smaller: true
    scrollable: true
    embed-resources: true
    logo: $TARGETER_PARAM_template_logo$
    df-print: kable 
    template: $TARGETER_PARAM_template_revealjs$   # apparently can't be managed by params :(
  pptx: 
    df-print: kable 
    reference-doc: $TARGETER_PARAM_template-pptx$  # apparently can't be managed by params :(
  beamer:
    toc: true
    logo: $TARGETER_PARAM_template_logo$
date: "`r format(Sys.Date())`"
title: "`r params$title`"
author: "`r params$author`"
---

```{r}
#| label: setup
#| warning: false
library(data.table)
library(targeter)


# print(params)
object <- qs::qread(params$object)

```


```{r}
stats <- setDT(object$profiles[[1]]$target_stats)
Ntot <- stats[, sum(count)]
if (object$target_type == "binary"){
  stats[, reference_level := ifelse(as.character(value) == as.character(object$target_reference_level), "*", "")]
}
```


## Analysis parameters

:::: {.columns}

::: {.column}
- Data used: `r object$dataname`
- Descrition of data: `r ifelse(!is.null(object$description_data), object$description_data, "no description provided.")`
- Analysis performed the: `r object$date`
- Target: `r paste(object$target, ifelse(!is.null(object$description_target), object$description_target, ""))` [`r object$target_type`]
- Number of variables: `r length(object$profiles)`
- Analysed population contains: `r Ntot` records.
- Analysis performed on: `r paste(object$session$R_version, "with targeter", object$session$targeter_package_version)`
:::

::: {.column}
```{r}
#| output: asis
print(kableExtra::kable(stats, format = "simple"))
```
:::
::::



```{r}
#| output: asis

for (i in seq_along(object$profiles)){
  ivar <- names(object$profiles)[i]
  iprofile <- object$profiles[[ivar]]

  cat("\n\n## ",names(object$profiles)[i],"\n\n")


  print(
    fullplot(
      iprofile, 
      which_plot= eval(
        parse(
          text = params$fullplot_which_plot 
          )
        )
      )
    )

  if (as.logical(params$tables)){

      cat("\n\n## ",names(object$profiles)[i]," [table]\n\n")
      tab <- table_crossvar(iprofile)

      print(kableExtra::kable(tab, format = "simple"))
      
    cat("\n\n")

  }
  
}
```
