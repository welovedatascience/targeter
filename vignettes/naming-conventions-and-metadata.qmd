---
title: "Naming Conventions and Metadata"
author: "welovedatascience"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    toc_float: true
    theme: united
    highlight: tango
vignette: >
  %\VignetteIndexEntry{Naming Conventions and Metadata}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---


<!-- devtools::build_rmd("vignettes/naming-conventions-and-metadata.rmd") -->

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```


## Introduction

This vignette demonstrates two powerful features of the targeter package that
 enhance standardization and professional reporting:

1. Variable Naming Conventions
Using standardized prefixes to indicate variable types

2. Metadata Integration - Using descriptive labels for variables in reports

These features are particularly valuable in enterprise environments where
 consistency and professional presentation are essential.

## Variable Naming Conventions

###The Naming Convention System
The targeter package supports a precise naming convention where the first
 two characters of variable names (a letter followed by an underscore) 
 indicate the variable type:

+-------------------------------+---------------------------+-----------------+
| Prefix                        |  Variable Type            |   Example       |
+-------------------------------+---------------------------+-----------------+
| N_, M_, F_, R_, P_, Y_,   J_  |  Numeric variables        |     N_AGE       |
+-------------------------------+---------------------------+-----------------+
| D_, S_                        |   Date variables          |   D_BIRTHDATE   |
+-------------------------------+---------------------------+-----------------+
| C_, T_, L_                    |   Categorical variables   |   C_EDUCATION   |
+-------------------------------+---------------------------+-----------------+
| Z_                            |   Target variables        |   Z_ABOVE50K    |
+-------------------------------+---------------------------+-----------------+
| O_                            |   Ordinal variables       |   O_RISK_LEVEL  |
+-------------------------------+---------------------------+-----------------+
| I_                            |   ID variables            |   I_CUSTOMER_ID |
+-------------------------------+---------------------------+-----------------+



This convention provides several benefits:

- Automatic variable type detection
- Standardized documentation
- Clearer communication in team settings
- Optimized statistical processing


```{r}
library(targeter)
library(data.table)
```

### Exploring the Adult Dataset

Let's examine the standard adult dataset included with the package:

```{r}
# Load the adult dataset
data(adult)

# Look at structure
str(adult[, 1:6])
```

### Creating Metadata for the Adult Dataset

For effective reporting, we'll create a metadata table containing:

- Original variable names
- Appropriate naming convention prefixes
- Human-readable labels for reporting

On concrete cases, user will have at disposal such metadata, stored in a database
or a file, and will be able to load it into its R environment. It is also possible 
to programatically generate similar metadata when you create variables, for instance
when performing feafure engineering in a modeling pipeline.

```{r}
# Create metadata table
adult_metadata <- data.frame(
  variable = names(adult),
  prefix = c(
    "N", # AGE - numeric
    "C", # WORKCLASS - categorical
    "N", # FNLWGT - numeric
    "C", # EDUCATION - categorical
    "N", # EDUCATIONNUM - numeric
    "C", # MARITALSTATUS - categorical
    "C", # OCCUPATION - categorical
    "C", # RELATIONSHIP - categorical
    "C", # FACE - categorical
    "C", # SEX - categorical
    "N", # CAPITALGAIN - numeric
    "N", # CAPITALLOSS - numeric
    "N", # HOURSPERWEEK - numeric
    "C", # NATIVECOUNTRY - categorical
    "Z"  # ABOVE50K - binary target
  ),
  label = c(
    "Age (years)",
    "Employment sector",
    "Final sampling weight",
    "Educational attainment",
    "Years of education",
    "Marital status",
    "Professional occupation",
    "Family relationship",
    "Race/ethnicity",
    "Gender",
    "Capital gain  in $",
    "Capital loss in $",
    "Hours worked per week",
    "Country of origin",
    "Income above $50K"
  )
)

# Display metadata
knitr::kable(adult_metadata)
```

### Applying the Naming Convention

Now we'll programmatically rename the variables according to our naming conventions:

```{r}
# Rename variables
# Create a renamed copy of the adult dataset
adult_renamed <- as.data.table(adult)

# Function to create new variable names
create_conventional_name <- function(original_name, prefix) {
  paste0(prefix, "_", original_name)
}

# Rename the variables based on metadata
for (i in 1:nrow(adult_metadata)) {
  old_name <- adult_metadata$variable[i]
  new_name <- create_conventional_name(old_name, adult_metadata$prefix[i])
  setnames(adult_renamed, old_name, new_name)
}

# Check the first few renamed variables
head(names(adult_renamed), 6)
```

### Validating Naming Conventions

The check_naming_conventions() function validates that variable 
prefixes match their actual data types:

```{r}
# Check naming conventions
# Check if our naming conventions are correctly applied
naming_check <- check_naming_conventions(adult_renamed)
head(naming_check)

# Count any errors in naming
sum(naming_check$ErrorType, na.rm = TRUE)
```

A value of `FALSE` for `ErrorType` means the naming convention is correctly 
followed for that variable.

### Using Naming Conventions with targeter

Let's run a target analysis using our conventionally named variables:

```{r}
# Run targeter with naming conventions enabled
tar_with_naming <- targeter(
  data = adult_renamed,
  target = "Z_ABOVE50K",
  naming_conventions = TRUE,
  verbose = FALSE
)

# Examine variable classifications
head(tar_with_naming$variables[, c("variable", "var_type", "respect_naming_convention")])
```

By setting naming_conventions = `TRUE`, the `targeter()` function:

1. Automatically detects variable types based on prefixes
2. Validates that prefixes match actual data types
3. Optimizes processing for each variable type
4. Provides a more consistent analysis output



## Using Metadata in Reports

The metadata we created can be used to generate professional reports
with descriptive labels.

This is as simple as passing as parameter the metadata we just created to the 
`targeter()` function.

```{r, eval=FALSE}
# Generate a report with metadata
report(
  tar_with_naming,
  metadata = adult_metadata,
  title = "Income Analysis using Naming Conventions",
  author = "Data Science Team"
)
```


