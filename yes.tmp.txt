function(data,                             data_original,                             all_vars,                             numeric_vars,                             ordinal_vars,                             categorical_vars,                             target,                             target_type,                             target_stats,                             target_reference_level,                             useNA,                             order_label,                             binning,                             dec,                             verbose,                             cont_target_trim,                             bxp_factor,                             woe_alternate_version,                             woe_shift,                             woe_post_cluster,                             woe_post_cluster_n) {      # Initialize result container   crossvars <- vector(mode = "list", length = length(all_vars))   names(crossvars) <- all_vars      # Process each variable   for (variable in all_vars) {     if (verbose) cat("\nProcessing variable:", variable)          # Determine variable type     if (variable %in% numeric_vars) {       variable_type <- "numeric"     } else if (variable %in% ordinal_vars) {       variable_type <- "ordinal"     } else {       variable_type <- "categorical"     }          # Calculate statistics     cross <- calculate_statistics(       data = data,       variable = variable,       target = target,       target_type = target_type,       useNA = useNA,       bxp_factor = bxp_factor,       variable_type = variable_type,       order_label = order_label,       cutpoints_list = binning$cutpoints_list,       dec = dec     )          # Add target information     cross$target_type <- target_type     cross$target_stats <- target_stats          # Calculate WOE/IV for binary and numeric targets     if (target_type %in% c("binary", "numeric")) {       # Determine whether to use alternate WOE version       alternate_version <- ifelse(         woe_alternate_version == "always",          TRUE,         (target_type == "numeric")       )              # Prepare data for WOE calculation (trim if needed)       analysis_data <- data       if (cont_target_trim > 0 & target_type == "numeric") {         min_max <- quantile(           data_original[[target]],           probs = c(cont_target_trim, 1 - cont_target_trim)         )         analysis_data <- analysis_data[           get(target) >= min_max[1] & get(target) <= min_max[2],         ]       }              # Calculate WOE and IV       woe_results <- compute_woe_iv(         data = analysis_data,         variable = variable,         target = target,         target_type = target_type,         target_reference_level = target_reference_level,         alternate_version = alternate_version,         useNA = useNA,         woe_shift = woe_shift,         woe_post_cluster = woe_post_cluster,         woe_post_cluster_n = woe_post_cluster_n,         variable_type = variable_type,         cutpoints_list = binning$cutpoints_list       )              cross$woe <- woe_results$WOE       cross$IV <- woe_results$IV       cross$woe_cluster <- woe_results$has_clusters     }          # Add numeric variable cutpoints information     if (variable %in% numeric_vars) {       cross$cutpoints <- binning$cutpoints_list[[variable]]       cross$numcenters <- binning$cutcenter_list[[variable]]     }          # Set class for proper method dispatch     class(cross) <- c(       "crossvar",       paste("crossvar", target_type, sep = "_"),       class(cross)     )          # Store in results list     crossvars[[variable]] <- cross   }      return(crossvars) }